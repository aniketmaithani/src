<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FreeSpace (Posts about Requests)</title><link>https://aniketmaithani.net/</link><description></description><atom:link href="https://aniketmaithani.net/categories/requests.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><copyright>Contents Â© 2017 &lt;a href="mailto:maithani.aniket@gmail.com"&gt;Aniket Maithani&lt;/a&gt; </copyright><lastBuildDate>Wed, 13 Sep 2017 12:51:09 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Sending BULK DATA using REQUEST LIBRARY</title><link>https://aniketmaithani.net/posts/sending-json-array-using-request-library/</link><dc:creator>Aniket Maithani</dc:creator><description>&lt;div&gt;&lt;p&gt;Few days back I was fiddling with my Raspberry Pi and found out that when my program sends a POST request it sends around 100 requests on an average. I later found out that for every record that gets registered on my device [basically some data I am capturing through sensors] it sends POST request for every data recorded! That's insane right!&lt;/p&gt;
&lt;p&gt;For those who are thinking why? Well, let me tell you :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Suppose there are 'n' records which are to be sent. Let's say that number in 10000&lt;/li&gt;
&lt;li&gt;Now every POST request takes about 0.5 seconds to complete&lt;/li&gt;
&lt;li&gt;Total Time Elapsed : 0.5 * 10000 = 5000 seconds!!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you get the gravity of the situation.&lt;/p&gt;
&lt;p&gt;And this POST request hit my endpoint &lt;cite&gt;/api/datacollection/&lt;/cite&gt; along with the data obviously. Now my tech-stack is Python/Django based and I am using THE AWESOME DRF for creating API's. The only work around I thought of this problem was if by any case I would be able to send data in bulk without fiddling the current &lt;cite&gt;viewset&lt;/cite&gt; that I have written.&lt;/p&gt;
&lt;p&gt;Solution -
1. Override the .create() method
2. Look for some third party library.&lt;/p&gt;
&lt;p&gt;And voila! I went for the second solution and which was quite easy in nature. Introducing : (Django Rest Framework) [&lt;a class="reference external" href="https://github.com/miki725/django-rest-framework-bulk"&gt;https://github.com/miki725/django-rest-framework-bulk&lt;/a&gt;] .&lt;/p&gt;
&lt;p&gt;For this I just have to change my viewset to :&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_6f7d311cc689486a890d4f4f717c948a-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework_bulk&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;BulkListSerializer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BulkSerializerMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListBulkCreateUpdateDestroyAPIView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6f7d311cc689486a890d4f4f717c948a-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_6f7d311cc689486a890d4f4f717c948a-3"&gt;&lt;/a&gt;   &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyDataViewset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListBulkCreateUpdateDestroyAPIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And without touching other piece of code it worked just fine :D&lt;/p&gt;
&lt;p&gt;And subsequently I was able to send around 5000 records in around 4.8912 seconds! Haha&lt;/p&gt;
&lt;p&gt;For those who are wondering my json structure was :&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_7b2e534fe2284198b3cbc2f65efdf0e3-1"&gt;&lt;/a&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'uid'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'87fbe152-4803-4953-9d76-266078dad892'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_7b2e534fe2284198b3cbc2f65efdf0e3-2"&gt;&lt;/a&gt; &lt;span class="s1"&gt;'count'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_7b2e534fe2284198b3cbc2f65efdf0e3-3"&gt;&lt;/a&gt; &lt;span class="s1"&gt;'count_sensor_flips'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_7b2e534fe2284198b3cbc2f65efdf0e3-4"&gt;&lt;/a&gt; &lt;span class="s1"&gt;'device_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'f72448db-f156-4d50-afc6-ed294509c041'&lt;/span&gt;&lt;span class="p"&gt;,},&lt;/span&gt;
&lt;a name="rest_code_7b2e534fe2284198b3cbc2f65efdf0e3-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'uid'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'87fbe152-4803-4953-9d76-266078dad892'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_7b2e534fe2284198b3cbc2f65efdf0e3-6"&gt;&lt;/a&gt; &lt;span class="s1"&gt;'count'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_7b2e534fe2284198b3cbc2f65efdf0e3-7"&gt;&lt;/a&gt; &lt;span class="s1"&gt;'count_sensor_flips'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_7b2e534fe2284198b3cbc2f65efdf0e3-8"&gt;&lt;/a&gt; &lt;span class="s1"&gt;'devce_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'f72448db-f156-4d50-afc6-ed294509c041'&lt;/span&gt;&lt;span class="p"&gt;,},&lt;/span&gt;
&lt;a name="rest_code_7b2e534fe2284198b3cbc2f65efdf0e3-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'uid'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'87fbe152-4803-4953-9d76-266078dad892'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_7b2e534fe2284198b3cbc2f65efdf0e3-10"&gt;&lt;/a&gt; &lt;span class="s1"&gt;'count'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_7b2e534fe2284198b3cbc2f65efdf0e3-11"&gt;&lt;/a&gt; &lt;span class="s1"&gt;'count_sensor_flips'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_7b2e534fe2284198b3cbc2f65efdf0e3-12"&gt;&lt;/a&gt; &lt;span class="s1"&gt;'devce_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'f72448db-f156-4d50-afc6-ed294509c041'&lt;/span&gt;&lt;span class="p"&gt;,}]&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Finally Goal Achieved.&lt;/p&gt;
&lt;p&gt;Till the next time....ADIOS!&lt;/p&gt;&lt;/div&gt;</description><category>DRF</category><category>Python</category><category>Requests</category><guid>https://aniketmaithani.net/posts/sending-json-array-using-request-library/</guid><pubDate>Wed, 13 Sep 2017 12:17:09 GMT</pubDate></item></channel></rss>